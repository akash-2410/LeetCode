//Approach-2 (Improving on Approach-1 above) - DP with cumulative sum approach
//Time : O(n*k)
//S.C : O(n*k)
//Read the comment below how people got this idea
public class Solution {
    int M = 1000000007;

    public int kInversePairs(int n, int k) {
        int[][] t = new int[n + 1][k + 1];

        // t[i][j] = total number of arrays having (1 to i) and exactly j inversions

        // for j = 0, t[i][0] = 1
        for (int i = 0; i <= n; i++) {
            t[i][0] = 1;
        }

        // O(n*k)
        for (int i = 1; i <= n; i++) {
            long cumSum = 1;
            for (int j = 1; j <= k; j++) {

                cumSum += t[i - 1][j];
                if (j >= i) {
                    cumSum -= t[i - 1][j - i];
                }
                t[i][j] = (int) (cumSum % M);
            }
        }

        return t[n][k];
    }
}



















/*
//Approach-1 
//T.C  : O(n*k*n)
//S.C  : O(n*k) for memo + Recursion call stack
public class Solution {
    final int M = 1000000007;

    public int kInversePairs(int n, int k) {
        int[][] t = new int[n + 1][k + 1]; //making 2d array to store the values 

        for (int i = 0; i < n + 1; i++) {
            t[i][0] = 1; // 1st col will be 1 always
        }

        for (int i = 1; i <= n; i++) { 
            for (int j = 1; j <= k; j++) {
                for (int inv = 0; inv <= Math.min(i - 1, j); inv++) { 
                    t[i][j] = (int) ((t[i][j] + t[i - 1][j - inv]) % M);
                }
            }
        }
        return t[n][k];
    }
}
*/

