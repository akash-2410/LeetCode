--------------------------------------------------------------------------------------------Question--------------------------------------------------------------------------------------------
You are given the root of a binary tree containing digits from 0 to 9 only.
Each root-to-leaf path in the tree represents a number.
For example, the root-to-leaf path 1 -> 2 -> 3 represents the number 123.
Return the total sum of all root-to-leaf numbers. Test cases are generated so that the answer will fit in a 32-bit integer.
A leaf node is a node with no children.
--------------------------------------------------------------------------------------------Example--------------------------------------------------------------------------------------------
Example 1:
https://assets.leetcode.com/uploads/2021/02/19/num1tree.jpg
Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.
Therefore, sum = 12 + 13 = 25.

Example 2:
https://assets.leetcode.com/uploads/2021/02/19/num2tree.jpg
Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path 4->9->5 represents the number 495.
The root-to-leaf path 4->9->1 represents the number 491.
The root-to-leaf path 4->0 represents the number 40.
Therefore, sum = 495 + 491 + 40 = 1026.
--------------------------------------------------------------------------------------------Intution--------------------------------------------------------------------------------------------
sumNumbers Method:
It takes a TreeNode root as input.
It calls the find method with the root node and an initial value of 0.
It returns the result obtained from the find method.

find Method:
It takes a TreeNode root and an integer curr as input.
If the root is null, it returns 0, indicating no sum.
It updates the curr value by multiplying it by 10 and adding the value of the current node (root.val).
If the current node is a leaf node (i.e., it has no left or right child), it returns the curr value, which represents the number formed by traversing from the root to this leaf node.
If the current node has left or right child nodes, it recursively calls the find method for both left and right children, passing the updated curr value.
It returns the sum of the results obtained from the left and right subtrees.
--------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------

class Solution {
    public int sumNumbers(TreeNode root) {
        return find(root,0);
    }
     public int find(TreeNode root, int curr) {
        if (root == null)
            return 0;

        curr = curr * 10 + root.val;

        if (root.left == null && root.right == null) {
            return curr;
        }

        int leftNum = find(root.left, curr);
        int rightNum = find(root.right, curr);

        return leftNum + rightNum;
    }

}
