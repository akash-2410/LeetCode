class Solution {
    public int findPaths(int m, int n, int maxMove, int startRow, int startColumn) {
        final int M =1000000000+7;
        int dp[][]=new int[m][n];
        dp[startRow][startColumn]= 1;//Set the starting cell (x, y) to 1, as there is one way to reach it initially.
        int count = 0;

        for(int moves=1;moves <= maxMove; moves++){
            int [][] temp = new int[m][n];

            for(int i=0;i<m;i++){
                for(int j=0;j<n;j++){

                    //If (i, j) is on the boundary, increment the count by the value of dp[i][j].This accounts for paths going out of the grid.

                    if(i == m-1) count=(count+dp[i][j])% M;
                    if(j == n-1) count=(count+dp[i][j])% M;
                    if(i==0) count=(count+dp[i][j])% M;
                    if(j == 0) count=(count+dp[i][j])% M;

                    //Update temp[i][j] based on the sum of the ways to reach the adjacent cells in the previous state (dp).  Directions to go are 1st [i-1][j],2nd dp[i+1][j],3rd dp[i][j-1] , 4th dp[i][j+1] 
                             
                    temp[i][j] =(
                        ((i>0?dp[i-1][j] :0) + (i<m-1 ?dp[i+1][j] :0))% M + 
                        ((j>0 ?dp[i][j-1] :0) + (j<n-1? dp[i][j+1] : 0))% M
                        ) % M;
                }
            }
             dp = temp;
        }
        return count;//Return the final count, representing the total number of paths that lead out of the grid after N moves.
    }
 
}
