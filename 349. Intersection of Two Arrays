--------------------------------------------------------------------------------------------Question-----------------------------------------------------------------------------------------------------------------
Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

--------------------------------------------------------------------------------------------Example-----------------------------------------------------------------------------------------------------------------
Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.

--------------------------------------------------------------------------------------------Intution-----------------------------------------------------------------------------------------------------------------
Create a hash map to store the counts of each element in nums1.
Iterate through nums2.
If the current element exists in the hash map, add it to the result vector and remove it from the hash map.
Complexity:

Time complexity: Since we iterate through both arrays once, the time complexity is O(n1 + n2), where n1 is the size of nums1 and n2 is the size of nums2.
Space complexity: We use extra space to store the counts of elements from nums1, so the space complexity is O(n1), where n1 is the size of nums1.

--------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------------------------
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums1) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        List<Integer> resultList = new ArrayList<>();
        for (int num : nums2) {
            if (map.containsKey(num)) {
                resultList.add(num);
                map.remove(num);
            }
        }
        
        int[] result = new int[resultList.size()];
        for (int i = 0; i < resultList.size(); i++) {
            result[i] = resultList.get(i);
        }
        return result;
    }
} 
