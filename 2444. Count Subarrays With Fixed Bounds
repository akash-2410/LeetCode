---------------------------------------------------------------------------------------------Question-----------------------------------------------------------------------------------------------------------------
You are given an integer array nums and two integers minK and maxK.
A fixed-bound subarray of nums is a subarray that satisfies the following conditions:
The minimum value in the subarray is equal to minK.
The maximum value in the subarray is equal to maxK.
Return the number of fixed-bound subarrays.
A subarray is a contiguous part of an array.
--------------------------------------------------------------------------------------------Example-----------------------------------------------------------------------------------------------------------------
Example 1:
Input: nums = [1,3,5,2,7,5], minK = 1, maxK = 5
Output: 2
Explanation: The fixed-bound subarrays are [1,3,5] and [1,3,5,2].

Example 2:
Input: nums = [1,1,1,1], minK = 1, maxK = 1
Output: 10
Explanation: Every subarray of nums is a fixed-bound subarray. There are 10 possible subarrays.
---------------------------------------------------------------------------------------------Intution-----------------------------------------------------------------------------------------------------------------
1. Initialize variables res to store the result, bad_idx to store the index of the last occurrence of a value outside the range [minK, maxK], 
and left_idx and right_idx to store the indices of the last occurrence of minK and maxK respectively.
2. Iterate through the array nums and update the values of bad_idx, left_idx, and right_idx accordingly.
3. For each index i, calculate the number of fixed-bound subarrays ending at i by taking the minimum of left_idx and right_idx, and subtracting bad_idx. Add this count to res.
4. Return the final result res.
---------------------------------------------------------------------------------------------Code syntax 1-----------------------------------------------------------------------------------------------------------
class Solution {
    public long countSubarrays(int[] nums, int minK, int maxK) {
        int minI = -1, maxI = -1, left = -1, right = 0;
        long count = 0;
        while(right < nums.length){
            if(nums[right] < minK || nums[right] > maxK){
                minI = right;
                maxI = right;
                left = right;
            }
            minI = nums[right] == minK ? right : minI;
            maxI = nums[right] == maxK ?  right : maxI;
            count += Math.min(minI, maxI) - left;
            right++;
        }
        return count;
    }
}
---------------------------------------------------------------------------------------------Code syntax 2--------------------------------------------------------------------------------------------------------
class Solution {
    public long countSubarrays(int[] nums, int minK, int maxK) {
         long ans=0;

        int minkpos=-1;
        int maxkpos=-1;
        int leftbound=-1;

        for(int i=0;i<nums.length;i++){
            if(nums[i]<minK || nums[i]>maxK){
                leftbound=i;
            }

            if (nums[i] == minK){
                minkpos=i;
            }
            if(nums[i] == maxK){
                maxkpos=i;
            }

            int count = Math.min(maxkpos,minkpos)-leftbound;

            ans+=(count<=0)?0:count;
        }
        return ans;
    }
}
