--------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------
The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers 0 and 1 respectively. All students stand in a queue.
Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:
If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.
Otherwise, they will leave it and go to the queue's end.
This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays students and sandwiches where sandwiches[i] is the type of the i​​​​​​th sandwich in the stack (i = 0 is the top of the stack) and students[j] is the preference 
of the j​​​​​​th student in the initial queue (j = 0 is the front of the queue). Return the number of students that are unable to eat.
--------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------
Example 1:
Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0 
Explanation:
- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].
- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].
- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].
- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].
- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].
- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].
Hence all students are able to eat.
--------------------------------------------------------------------------------------------Intution---------------------------------------------------------------------------------------------
Initialization:
It initializes an array counts of length 2 to keep track of the count of each type of preference (0 and 1) among students.
It initializes a variable remaining to keep track of the number of sandwiches remaining to be distributed.

Counting Students' Preferences:
It iterates through the students array and counts the number of students with preferences 0 and 1.

Distributing Sandwiches:
It iterates through the sandwiches array to distribute sandwiches.
For each sandwich, it checks if there are any students left with that preference. If not, it breaks out of the loop, indicating that some sandwiches cannot be distributed.
If there are students with the preference of the current sandwich, it decrements the count of such students and decrements the remaining sandwiches count.

Returning Remaining Sandwiches:
Finally, it returns the value of remaining, which indicates the number of sandwiches that couldn't be distributed due to unavailability of matching student preferences.
--------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------
class Solution {
    public int countStudents(int[] students, int[] sandwiches) {
        int[] counts = new int[2];
        for (int student : students) counts[student]++;
        
        int remaining = sandwiches.length;
        for (int sandwich : sandwiches) {
            if (counts[sandwich] == 0) break;
            if (remaining-- == 0) break;
            counts[sandwich]--;
        }
        
        return remaining;
    }
}
