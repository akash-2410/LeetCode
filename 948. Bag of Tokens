-------------------------------------------------------------------------------------------------------Question------------------------------------------------------------------------------------------------------
You start with an initial power of power, an initial score of 0, and a bag of tokens given as an integer array tokens, where each tokens[i] donates the value of tokeni.

Your goal is to maximize the total score by strategically playing these tokens. In one move, you can play an unplayed token in one of the two ways (but not both for the same token):

Face-up: If your current power is at least tokens[i], you may play tokeni, losing tokens[i] power and gaining 1 score.
Face-down: If your current score is at least 1, you may play tokeni, gaining tokens[i] power and losing 1 score.
Return the maximum possible score you can achieve after playing any number of tokens.
-------------------------------------------------------------------------------------------------------Example------------------------------------------------------------------------------------------------------
Example 1:
Input: tokens = [100], power = 50
Output: 0
Explanation: Since your score is 0 initially, you cannot play the token face-down. You also cannot play it face-up since your power (50) is less than tokens[0] (100).


Example 2:
Input: tokens = [100,200,300,400], power = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
Play token0 (100) face-up, reducing power to 100 and increasing score to 1.
Play token3 (400) face-down, increasing power to 500 and reducing score to 0.
Play token1 (200) face-up, reducing power to 300 and increasing score to 1.
Play token2 (300) face-up, reducing power to 0 and increasing score to 2.
The maximum score achievable is 2


-------------------------------------------------------------------------------------------------------Intution---------------------------------------------------------------------------------------------------------
The code sorts an array of tokens and iterates through it with two pointers (l and r). It maximizes the score by consuming tokens based on conditions. Key points:
Sorting: The array of tokens is sorted in ascending order.
Initialization: Variables score (score) and maxiScore (maximum score) are initialized, and pointers l and r are set.
Main Loop: It iterates while l is less than or equal to r.
Conditions inside the loop:
If current power is enough, consume the token at l, increment score, move l forward, and update maxi.
If the score is positive, consume the last token at r, decrement the score, and move r backward.
Break if no valid moves are left.
Return: Returns the maximum score (maxiScore).

Time Complexity-O(N log N)
Space Complexity-O(1)

-------------------------------------------------------------------------------------------------------Code---------------------------------------------------------------------------------------------------------
class Solution {
    public int bagOfTokensScore(int[] tokens, int power) {
        int n=tokens.length;
        Arrays.sort(tokens);
        int score = 0;                                       // Initialize the Score
        int maxiScore = 0;                                   // Track the maximum score
        int l = 0, r = n-1;              // Left and Right pointer 
        while (l <= r) { 
            if (power >= tokens[l]) {                // If the remaining power is greater than or equal to the smallest token
                power -= tokens[l];                 // Reduce the Power 
                score++;                               // Increase the score
                l++;                              // Move the left pointer to the right.
                maxiScore = Math.max(maxiScore, score);             // Update the maximum score if the current score is higher.score
            } 
            else if (score > 0) {                  // If the current score is positive, consider trading tokens for power.
                power += tokens[r];           // increase the power
                score--;                         // Decrease the score.
                r--;                        // Move the right pointer to the left.
            } 
            else {
                break;                  // exit the loop if neither condition is met
            }
        }

        return maxiScore;
    }
}
