-------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------------

Given an array nums containing n distinct numbers in the range [0, n], return the only number in the range that is missing from the array.

-------------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------------------
Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.

Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.

-------------------------------------------------------------------------------------------------Approach 1 with Code----------------------------------------------------------------------------------------------
Approach 1
XOR operation we should be known:
We will xor each number present in the nums to itself.

Then will xor it with every number present in the range [0,n].

Time complexity:
O(n)

Space complexity:
O(1)

Code
public class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int ans = 0;
        for (int i = 1; i <= n; i++) {
            ans = ans ^ i;
        }
        for (int i = 0; i < nums.length; i++) {
            ans = ans ^ nums[i];
        }
        return ans;
    }
}


-------------------------------------------------------------------------------------------------Approach 2 with Code----------------------------------------------------------------------------------------------
Approach 2(Sum of all elememnts)
sum of all elements in the range[0,n].
sum of nums.
If we subtrate both we will get the missing number

Time complexity:
O(n)

Space complexity:
O(1)

Code

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int Tsum = (n * (n + 1)) / 2;
        int actualSum = Arrays.stream(nums).sum();
        return Tsum - actualSum;
    }
}

