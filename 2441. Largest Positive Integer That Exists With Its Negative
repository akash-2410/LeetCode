-------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------------
Given an integer array nums that does not contain any zeros, find the largest positive integer k such that -k also exists in the array.

Return the positive integer k. If there is no such integer, return -1
-------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------------
Example 1:
Input: nums = [-1,2,-3,3]
Output: 3
Explanation: 3 is the only valid k we can find in the array.

Example 2:
Input: nums = [-1,10,6,7,-7,1]
Output: 7
Explanation: Both 1 and 7 have their corresponding negative values in the array. 7 has a larger value.

Example 3:
Input: nums = [-10,8,6,7,-2,-3]
Output: -1
Explanation: There is no a single valid k, we return -1.
-------------------------------------------------------------------------------------Intution----------------------------------------------------------------------------------------------------
Approach😎:
Sort the array in ascending order.
Use two pointers, one starting from the beginning and one from the end.
Move the pointers towards each other until you find a positive integer with its negative counterpart.
Keep track of the largest positive integer found.

Complexity🧑🏻‍🔬:
⏰ Time complexity: O(n log n) due to sorting.
🌌 Space Complexity: O(1)



-------------------------------------------------------------------------------------Code--------------------------------------------------------------------------------------------------------
class Solution {
    public int findMaxK(int[] nums) {
        Arrays.sort(nums);
        int left = 0, right = nums.length - 1;
        int maxK = Integer.MIN_VALUE;
        while (left < right) {
            int sum = nums[left] + nums[right];
            if (sum == 0) {
                maxK = Math.max(maxK, nums[right]);
                left++;
                right--;
            } else if (sum < 0) {
                left++;
            } else {
                right--;
            }
        }
        return maxK != Integer.MIN_VALUE ? maxK : -1;  // If no such pair found
    }
}


