------------------------------------------------------------------------------------------------------Question-------------------------------------------------------------------------------------------------------

Given an array of integers nums containing n + 1 integers where each integer is in the range [1, n] inclusive.

There is only one repeated number in nums, return this repeated number.

You must solve the problem without modifying the array nums and uses only constant extra space.
------------------------------------------------------------------------------------------------------Example-------------------------------------------------------------------------------------------------------
Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [3,3,3,3,3]
Output: 3
------------------------------------------------------------------------------------------------------Intution-------------------------------------------------------------------------------------------------------
Boolean Array:
The boolean array taken is used to mark whether a number has been encountered before.
Each index of the taken array corresponds to a number that can potentially appear in the input array nums.
Initially, all elements in the taken array are false, indicating that no number has been encountered yet.

Iteration through the Input Array:
The code iterates through each element num in the input array nums.
For each element num, it checks whether the corresponding index in the taken array is true. If it is, it means that num has been encountered before, indicating a duplicate.
If num has not been encountered before, it marks the corresponding index in the taken array as true, indicating that num has been seen.

Finding the Duplicate:
As soon as a number is encountered for the second time (i.e., when taken[num] is true), the method returns num, indicating the presence of a duplicate.
If no duplicate is found during the iteration, the method returns 0, which could be interpreted as no duplicate found.

Efficiency:
This approach has a time complexity of O(n), where n is the length of the input array nums. This is because it iterates through the array once, 
and the boolean array taken ensures constant-time lookups to determine whether a number has been encountered before.

Space Complexity:
The boolean array taken consumes additional space proportional to the length of the input array nums, leading to a space complexity of O(n).
------------------------------------------------------------------------------------------------------Code---------------------------------------------------------------------------------------------------------

class Solution {
    public int findDuplicate(int[] nums) {
        boolean[] taken = new boolean[nums.length];
    for (int num : nums) {
      if (taken[num]) {
        return num;
      }
      taken[num] = true;
    }
    return 0;
    }
}
