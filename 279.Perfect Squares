-----------------------------------------------------------------------------------------------------Question--------------------------------------------------------------------------------------------------------
Given an integer n, return the least number of perfect square numbers that sum to n.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, 1, 4, 9, and 16 are perfect squares while 3 and 11 are not.



-----------------------------------------------------------------------------------------------------Examples--------------------------------------------------------------------------------------------------------

Example 1:
Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.

Example 2:
Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.

-----------------------------------------------------------------------------------------------------Intution--------------------------------------------------------------------------------------------------------
~Dynamic Programming: Utilizes dynamic programming to find the minimum number of perfect squares that sum up to the given number n.

~Initialization: Initializes a vector dp of size n + 1 where each element is initialized to INT_MAX, except dp[0] which is set to 0 since it doesn't require any perfect squares to represent.

~Iterative Calculation: Iterates from 1 to n to calculate the minimum number of perfect squares required for each number.

~Inner Loop: For each number i, iterates over all perfect squares less than or equal to i (from 1 to sqrt(i)) to find the minimum number of perfect squares required.

~Updating dp[i]: Updates dp[i] with the minimum value found by comparing it with the current value of dp[i - j * j] + 1, where j * j represents the perfect square being considered.

-----------------------------------------------------------------------------------------------------Code-------------------------------------------------------------------------------------------------------

public class Solution {
    public int numSquares(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        // dp[i] = min number of perfect squares to get i
        dp[0] = 0;

        for (int i = 1; i <= n; i++) {
            // For each i, it must be the sum of some number (i - j*j) and
            // a perfect square number (j*j).
            for (int j = 1; j * j <= i; j++) {
                int remain = i - j * j;
                dp[i] = Math.min(dp[i], 1 + dp[remain]);
            }
        }

        return dp[n];
    }
}






