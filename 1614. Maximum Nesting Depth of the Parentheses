-----------------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------------------
A string is a valid parentheses string (denoted VPS) if it meets one of the following:
It is an empty string "", or a single character not equal to "(" or ")",
It can be written as AB (A concatenated with B), where A and B are VPS's, or
It can be written as (A), where A is a VPS.
We can similarly define the nesting depth depth(S) of any VPS S as follows:
depth("") = 0
depth(C) = 0, where C is a string with a single character not equal to "(" or ")".
depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's.
depth("(" + A + ")") = 1 + depth(A), where A is a VPS.
For example, "", "()()", and "()(()())" are VPS's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not VPS's.

Given a VPS represented as string s, return the nesting depth of s.
-----------------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------------------
Example 1:
Input: s = "(1+(2*3)+((8)/4))+1"
Output: 3
Explanation: Digit 8 is inside of 3 nested parentheses in the string.

Example 2:
Input: s = "(1)+((2))+(((3)))"
Output: 3
-----------------------------------------------------------------------------------------------------Intution----------------------------------------------------------------------------------------------------------
It initializes two variables maxCount and count to keep track of the maximum depth encountered so far and the current depth respectively. Both are initialized to 0.

It iterates over each character in the input string s using a for loop.

If the current character is an opening parenthesis '(', it increments the count variable to indicate that it's entering into a deeper level of nesting. It also updates the maxCount variable with the maximum of its current value and the current count.

If the current character is a closing parenthesis ')', it decrements the count variable to indicate that it's exiting a level of nesting.

Finally, it returns the maxCount variable, which holds the maximum depth of nested parentheses encountered in the input string.
-----------------------------------------------------------------------------------------------------Code----------------------------------------------------------------------------------------------------------
class Solution {
    public int maxDepth(String s) {
        int maxCount=0;
        int count=0;
       for(int i=0;i<s.length();i++){
           if(s.charAt(i) == '('){
             count++;
             maxCount=Math.max(maxCount,count);}
            else if(s.charAt(i) ==')') {
             count--;
          }
       } 
    
       return maxCount;   
    }
}
