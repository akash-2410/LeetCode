-----------------------------------------------------------------------------------------------Question-------------------------------------------------------------------------------------------
The XOR total of an array is defined as the bitwise XOR of all its elements, or 0 if the array is empty.

For example, the XOR total of the array [2,5,6] is 2 XOR 5 XOR 6 = 1.
Given an array nums, return the sum of all XOR totals for every subset of nums. 

Note: Subsets with the same elements should be counted multiple times.

An array a is a subset of an array b if a can be obtained from b by deleting some (possibly zero) elements of b.

-----------------------------------------------------------------------------------------------Example-------------------------------------------------------------------------------------------
Example 1:
Input: nums = [1,3]
Output: 6
Explanation: The 4 subsets of [1,3] are:
- The empty subset has an XOR total of 0.
- [1] has an XOR total of 1.
- [3] has an XOR total of 3.
- [1,3] has an XOR total of 1 XOR 3 = 2.
0 + 1 + 3 + 2 = 6

Example 2:
Input: nums = [5,1,6]
Output: 28
Explanation: The 8 subsets of [5,1,6] are:
- The empty subset has an XOR total of 0.
- [5] has an XOR total of 5.
- [1] has an XOR total of 1.
- [6] has an XOR total of 6.
- [5,1] has an XOR total of 5 XOR 1 = 4.
- [5,6] has an XOR total of 5 XOR 6 = 3.
- [1,6] has an XOR total of 1 XOR 6 = 7.
- [5,1,6] has an XOR total of 5 XOR 1 XOR 6 = 2.
0 + 5 + 1 + 6 + 4 + 3 + 7 + 2 = 28
-----------------------------------------------------------------------------------------------Intution-------------------------------------------------------------------------------------------
Problem Understanding
The problem requires calculating the sum of the XOR of all possible subsets of a given array nums. 
XOR (exclusive OR) is a bitwise operation that compares corresponding bits of two numbers and returns 1 if the bits are different, and 0 if they are the same.

Approach
The approach uses recursion to explore all possible subsets of the given array nums. For each element in the array, we have two choices:

Include the current element in the current subset.
Exclude the current element from the current subset.
Recursive Function Explanation
The helper function is designed to recursively explore these two choices for each element in the array. Here's a step-by-step breakdown of how it works:

Base Case: If we've processed all elements in the array (i.e., level == nums.length), the recursion stops, and we return the XOR value of the current subset (currentXOR).
This value contributes to the total XOR sum of all subsets.

Recursive Case: For each element at index level in the array:

Include the Element: Compute the XOR value if we include nums[level] in the current subset.
This is done by calling helper with the next level (level + 1) and the XOR of currentXOR with nums[level] (currentXOR ^ nums[level]).
Exclude the Element: Compute the XOR value if we exclude nums[level] from the current subset.
This is done by calling helper with the next level (level + 1) and keeping currentXOR unchanged.
Sum of Results: The result for the current level is the sum of the results from both the include and exclude cases. 
This ensures that all possible subsets are considered and their XOR values are summed up.
-----------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------
class Solution {
    public int subsetXORSum(int[] nums) {
        // The main function calls the helper function to start the recursion process.
        // We start with the entire nums array, the initial level as 0, and the initial XOR value as 0.
        return helper(nums, 0, 0); // nums, level, current XOR
    }

    // Helper function to recursively calculate the XOR sum of all subsets.
    // nums: the input array of numbers
    // level: the current index in the array we are processing
    // currentXOR: the XOR value of the current subset we are considering
    public int helper(int nums[], int level, int currentXOR) {
        // Base condition: If we've processed all elements in the array,
        // return the XOR value of the current subset.
        if (level == nums.length) return currentXOR;

        // Recursive case: Calculate the XOR sum when including the current element (nums[level]).
        int include = helper(nums, level + 1, currentXOR ^ nums[level]);

        // Recursive case: Calculate the XOR sum when excluding the current element.
        int exclude = helper(nums, level + 1, currentXOR);

        // Return the sum of the results from both include and exclude cases.
        // This ensures that we are considering both subsets that include and exclude the current element.
        return include + exclude;
    }
}


