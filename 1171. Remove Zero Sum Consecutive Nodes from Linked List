---------------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------
Given the head of a linked list, we repeatedly delete consecutive sequences of nodes that sum to 0 until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

(Note that in the examples below, all sequences are serializations of ListNode objects.)
---------------------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------------
Example 1:
Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.

Example 2:
Input: head = [1,2,3,-3,4]
Output: [1,2,4]
---------------------------------------------------------------------------------------------------------Intution---------------------------------------------------------------------------------------------------
The function first checks if the head of the linked list is null. If it is, the function returns null, as there are no sublists to remove.

The function then initializes a variable prev to null, which will be used to keep track of the previous node. It also initializes a variable running_sum to 0,
which will be used to keep track of the running sum of the node values.

The function then enters a while loop, which continues until the current node (cur) is null. Inside the while loop, the function updates the running sum by adding the value of the current node.

The function then checks if the running sum is 0. If it is, it means that the sublist from the previous node to the current node sums up to 0. 
In this case, the function removes the sublist from the linked list by setting the next pointer of the previous node to the next node of the current node.

After removing the sublist, the function recursively calls itself with the head of the remaining linked list. This is done to handle any remaining sublists that may need to be removed.

If the running sum is not 0, the function moves on to the next node in the linked list.

Finally, the function sets the next pointer of the head node to the result of recursively calling the removeZeroSumSublists function with the next node of the head node. 
This is done to handle any remaining sublists that may need to be removed.

The function then returns the head of the updated linked list, which may have had some sublists removed.

The main intution behind this approach is to use a while loop to iterate through the linked list and a running sum to keep track of the sublists that need to be removed.
By using a while loop instead of recursion, the function can efficiently handle large linked lists.

The function also uses a previous pointer to keep track of the previous node, which is necessary for removing sublists from the linked list.

The function recursively calls itself with the head of the remaining linked list after removing a sublist. This is done to handle any remaining sublists that may need to be removed.

The function returns the head of the updated linked list, which may have had some sublists removed.

---------------------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------------
class Solution {
    public ListNode removeZeroSumSublists(ListNode head) {
        if(head == null)return head;
        ListNode prev = null;
        ListNode cur = head;
        int  running_sum=0;
        while(cur!=null)
        {
            running_sum += cur.val;
            if(running_sum==0)
            {
                if(prev == null)
                head = cur.next;
                else
                prev.next = cur.next;
                return removeZeroSumSublists(head);
            }
            cur = cur.next;
        }
        head.next = removeZeroSumSublists(head.next);
        return head;
    }



