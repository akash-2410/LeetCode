--------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------
The Tribonacci sequence Tn is defined as follows: 
T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.
Given n, return the value of Tn.
--------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------
Example 1:
Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4

Example 2:
Input: n = 25
Output: 1389537
--------------------------------------------------------------------------------------------Intution----------------------------------------------------------------------------------------------
The method tribonacci takes an integer n as input and returns the n-th term in the Tribonacci sequence.
It first checks if n is 0, in which case it returns 0 since the 0-th term of the Tribonacci sequence is 0.
If n is 1 or 2, it returns 1 because the 1st and 2nd terms of the Tribonacci sequence are both 1.
For values of n greater than 2, it initializes an array dp of size n + 1 to store the Tribonacci numbers. The indices of this array represent the position in the sequence.
It initializes dp[1] and dp[2] to 1 since the 1st and 2nd terms are 1.
Then, it iterates from 3 to n, filling in each dp[i] with the sum of the previous three terms in the sequence, which are dp[i - 1], dp[i - 2], and dp[i - 3].
Finally, it returns dp[n], which represents the n-th term in the Tribonacci sequence.
--------------------------------------------------------------------------------------------Code-------------------------------------------------------------------------------------------------
class Solution {
    public int tribonacci(int n) {
        if (n == 0) {
            return 0;
        } else if (n == 1 || n == 2) {
            return 1;
        }
        
        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 1;
        
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3];
        }
        
        return dp[n];
    }
}
