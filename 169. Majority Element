---------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------------
Given an array nums of size n, return the majority element.

The majority element is the element that appears more than âŒŠn / 2âŒ‹ times. You may assume that the majority element always exists in the array.

---------------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------------------

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

---------------------------------------------------------------------------------------------------Intution---------------------------------------------------------------------------------------------------------
Here, we've enlisted the help of two reliable variables: "count," keeping track of occurrences, and "element," our potential answer holder. ðŸ“Š

While scanning through the array, if we chance upon an element with a count of 0, we seize the opportunity and declare it our answer.
ðŸŽ‰ Subsequently, encountering the same element again, we jubilantly increase its count; otherwise, we calmly decrease it. ðŸ”„

---------------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------------------

Approach 1:(As per Intution)

class Solution {
    public int majorityElement(int[] nums) {
        int count = 0;
        int element = 0;

        for (int num : nums) {
            if (count == 0) {
                element = num;
                count = 1;
            } else if (element == num) {
                count++;
            } else {
                count--;
            }
        }

        return element;
    }
}


Approach 2:(Using hashmap)
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer,Integer> ans=new HashMap<>();
        int n=nums.length/2;
        for(int i:nums){
            ans.put(i,ans.getOrDefault(i,0)+1);
        }
        int ans1=0;
        for(Map.Entry<Integer,Integer> entry:ans.entrySet()){
            if(entry.getValue()>n){
                ans1=entry.getKey();
                break;
            }
        }
        return ans1;
    }
}

