---------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------
You are given an n x n integer matrix grid.

Generate an integer matrix maxLocal of size (n - 2) x (n - 2) such that:

maxLocal[i][j] is equal to the largest value of the 3 x 3 matrix in grid centered around row i + 1 and column j + 1.
In other words, we want to find the largest value in every contiguous 3 x 3 matrix in grid.

Return the generated matrix.
---------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------
Example 1:

https://assets.leetcode.com/uploads/2022/06/21/ex1.png
Input: grid = [[9,9,8,1],[5,6,2,6],[8,2,6,4],[6,2,2,2]]
Output: [[9,9],[8,6]]
Explanation: The diagram above shows the original matrix and the generated matrix.
Notice that each value in the generated matrix corresponds to the largest value of a contiguous 3 x 3 matrix in grid.
---------------------------------------------------------------------------------------------Intution---------------------------------------------------------------------------------------------
Local Region Exploration: The method aims to find the largest value in each local region of the input grid. A local region is a small subset of the grid centered around each cell,
typically a 3x3 square excluding the boundary cells.

Iterative Traversal: The method iterates through each cell of the input grid, excluding the boundary cells. For each cell (i, j), it explores the local region centered around it.

Max Value Computation: Within each local region, the method initializes a variable temp to store the maximum value found so far. 
It then iterates through all the cells in the local region and updates temp with the maximum value encountered.

Boundary Handling: Since the local region is a 3x3 square centered around the current cell (i, j), the nested loops iterate from i - 1 to i + 1 for rows and from j - 1 to j + 1 for columns. 
This ensures that we explore the entire local region while avoiding out-of-bounds access.

Storing Results: After finding the maximum value within the local region, the method stores this value in the result array res at the corresponding position (i - 1, j - 1).
This adjustment is necessary because the result array has dimensions (n - 2) x (n - 2) to exclude the boundary cells.

Returning Results: Once all local regions have been explored, the method returns the result array containing the largest values found in each local region.
---------------------------------------------------------------------------------------------Code------------------------------------------------------------------------------------------------
class Solution {
    // Method to find the largest value in each local region of the input grid
    public int[][] largestLocal(int[][] grid) {
        // Get the size of the input grid
        int n = grid.length;
        
        // Initialize a 2D array to store the result
        // The result will have dimensions (n - 2) x (n - 2)
        int[][] res = new int[n - 2][n - 2];

        // Iterate through the input grid, excluding the boundary elements
        for(int i = 1; i < n - 1; ++i) {
            for(int j = 1; j < n - 1; ++j) {
                // Initialize a variable to store the maximum value in the local region
                int temp = 0;

                // Iterate through the 3x3 local region centered at (i, j)
                for(int k = i - 1; k <= i + 1; ++k) {
                    for(int l = j - 1; l <= j + 1; ++l) {
                        // Update temp with the maximum value found in the local region
                        temp = Math.max(temp, grid[k][l]);
                    }
                }

                // Store the maximum value found in the result array at the corresponding position
                res[i - 1][j - 1] = temp;
            }
        }

        // Return the result array containing the largest values in each local region
        return res;
    }
}


