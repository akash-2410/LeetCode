----------------------------------------------------------------------------------------------Question-----------------------------------------------------------------------------------------------------------
Given a positive integer n, find the pivot integer x such that:

The sum of all elements between 1 and x inclusively equals the sum of all elements between x and n inclusively.
Return the pivot integer x. If no such integer exists, return -1. It is guaranteed that there will be at most one pivot index for the given input.
----------------------------------------------------------------------------------------------Example-----------------------------------------------------------------------------------------------------------
Example 1:
Input: n = 8
Output: 6
Explanation: 6 is the pivot integer since: 1 + 2 + 3 + 4 + 5 + 6 = 6 + 7 + 8 = 21.

Example 2:
Input: n = 1
Output: 1
Explanation: 1 is the pivot integer since: 1 = 1.
----------------------------------------------------------------------------------------------Code--------------------------------------------------------------------------------------------------------------
// A Simple Binary Search technique

class Solution {
    public int pivotInteger(int n) {
        int leftBound = 1, rightBound = n;
        int fullSum = (n * (n + 1)) / 2;
        while (leftBound <= rightBound) {
            int midNum = leftBound + (rightBound - leftBound) / 2;
            int firstHlfSum = (midNum * (midNum + 1)) / 2;
            int secondHlfSum = fullSum - firstHlfSum + midNum;
            if (firstHlfSum == secondHlfSum)
                return midNum;
            else if (firstHlfSum < secondHlfSum)
                leftBound = midNum + 1;
            else
                rightBound = midNum - 1;
        }
        return -1;
    }
}
