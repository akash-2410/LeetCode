Given a binary tree root and an integer target, delete all the leaf nodes with value target.

Note that once you delete a leaf node with value target, if its parent node becomes a leaf node and has the value target, 
it should also be deleted (you need to continue doing that until you cannot).

 
Example 1:

https://assets.leetcode.com/uploads/2020/01/09/sample_1_1684.png
Input: root = [1,2,3,2,null,2,4], target = 2
Output: [1,null,3,null,4]
Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). 
After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).

Example 2:
Input: root = [1,3,3,3,2], target = 3
Output: [1,3,null,null,2]

Example 3:
Input: root = [1,2,null,2,null,2], target = 2
Output: [1]
Explanation: Leaf nodes in green with value (target = 2) are removed at each step.

--------------------------------------------------------------------------------------Intution and Code----------------------------------------------------------------------------------------

Base Case for Recursion:

The method first checks if the current node (root) is not null. If it is null, it directly returns null. This serves as the base case for the recursion.
Recursive Calls:

The method recursively calls itself for the left subtree (root.left = removeLeafNodes(root.left, target)) and the right subtree (root.right = removeLeafNodes(root.right, target)).
These recursive calls traverse the entire tree, visiting each node and processing its children before processing the node itself.
Checking and Removing Leaf Nodes:

After the recursive calls, the method checks if the current node is a leaf node (i.e., both root.left and root.right are null) and if its value equals the target (root.val == target).
If both conditions are met, the current node is a leaf node with the target value and should be removed. This is done by returning null.
Returning the Node:

If the current node is not a leaf node or does not have the target value, it is retained in the tree, and the method returns the current node itself (return root).



class Solution {
    // Method to remove leaf nodes with a specific target value from a binary tree
    public TreeNode removeLeafNodes(TreeNode root, int target) {
        // If the current node is not null, proceed with recursive calls
        if(root != null) {
            // Recursively call the method for the left subtree
            root.left = removeLeafNodes(root.left, target);
            // Recursively call the method for the right subtree
            root.right = removeLeafNodes(root.right, target);
            
            // After recursive calls, check if the current node is a leaf node and has the target value
            if(root.left == null && root.right == null && root.val == target){
                // If it's a leaf node with the target value, return null to remove it
                return null;
            }
            // If the current node is not a leaf node or doesn't have the target value, return the node itself
            return root;
        }
        // If the current node is null, simply return null
        return null;
    }
}

 
