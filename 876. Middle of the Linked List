---------------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------------------------
Given the head of a singly linked list, return the middle node of the linked list.

If there are two middle nodes, return the second middle node.
---------------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------------------------
Example 1:
Input: head = [1,2,3,4,5]
Output: [3,4,5]
Explanation: The middle node of the list is node 3.

Example 2:
Input: head = [1,2,3,4,5,6]
Output: [4,5,6]
Explanation: Since the list has two middle nodes with values 3 and 4, we return the second one.
---------------------------------------------------------------------------------------------------Code-------------------------------------------------------------------------------------------------------------
class Solution {
    public ListNode middleNode(ListNode head) {
         //# Initialize two pointers, slow and fast, both pointing to the head of the list
        ListNode slow=head;
        ListNode fast=head;
        
        // Move the fast pointer two steps at a time
        while(fast!=null && fast.next!=null){
            slow=slow.next;// Move the slow pointer one step at a time
            fast=fast.next.next; // Move the fast pointer two steps at a time
        }
         // When the fast pointer reaches the end of the list, the slow pointer will be at the middle node
        return slow;
    }
}
