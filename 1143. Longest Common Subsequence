class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
         // Lengths of the input strings
        int m=text1.length();
        int n=text2.length();
        // Create a 2D array to store the lengths of longest common subsequences
        // for all subproblems, initialized with zero
        int[][] dp = new int[m+1][n+1];
        
        // Build the dp array from the bottom up
        for(int i=1;i<=m;++i){
            for(int j=1;j<=n;++j){
                // If characters match, take diagonal value and add 1
                if(text1.charAt(i-1) == text2.charAt(j-1)){
                    dp[i][j] = dp[i-1][j-1] + 1;
                }
                 // If characters do not match, take the maximum value from 
                // the left (dp[i][j-1]) or above (dp[i-1][j])
                else{
                    dp[i][j] = Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        // The bottom-right cell contains the length of the longest
        // common subsequence of text1 and text2
        return dp[m][n];
    }
}
