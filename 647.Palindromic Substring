----------------------------------------------------------------------------------------------------Question-------------------------------------------------------------------------------------------------------
Given a string s, return the number of palindromic substrings in it.
A string is a palindrome when it reads the same backward as forward.
A substring is a contiguous sequence of characters within the string.

----------------------------------------------------------------------------------------------------Example-------------------------------------------------------------------------------------------------------

Example 1:
Input: s = "abc"
Output: 3
Explanation: Three palindromic strings: "a", "b", "c".

Example 2:
Input: s = "aaa"
Output: 6
Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".

----------------------------------------------------------------------------------------------------Intution-------------------------------------------------------------------------------------------------------

The code utilizes a technique called "expand around center" to efficiently find palindromic substrings within the given string. By iterating through each character and considering it as a potential center, 
the code expands outward from that center to check for palindromes. This approach ensures that all possible palindromic substrings, 
both odd-length and even-length, are identified. The count variable keeps track of the total count of palindromic substrings found during the process.

----------------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------------------------
class Solution {
    private int count = 0;//variable count to keep track of the total count of palindromic substrings.

//It iterates through each character in the string s, considering it as a potential center of a palindrome. For each character, it expands outwards from that center to check for palindromic substrings.  
//The check method performs the actual palindrome checking by moving the indices i and j towards the start and end of the string, respectively, as long as the characters at these positions are equal.

private void check(String s, int i, int j, int n) {
        while (i >= 0 && j < n && s.charAt(i) == s.charAt(j)) {
            count++;//Each time a palindrome is found, the count variable is incremented.
            i--; // expanding from center
            j++; // expanding from center
        }
    }

    public int countSubstrings(String s) {
        int n = s.length();
        count = 0;

     /* For each center, it performs two expansions:
        One for odd-length palindromes: expands from the center character itself (check(s, i, i, n)).
        One for even-length palindromes: expands from the center character and its next adjacent character (check(s, i, i + 1, n)).*/

        for (int i = 0; i < n; i++) {
            check(s, i, i, n);
            check(s, i, i + 1, n);
        }
        return count;
    }
}
