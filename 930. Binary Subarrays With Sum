--------------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------
Given a binary array nums and an integer goal, return the number of non-empty subarrays with a sum goal.

A subarray is a contiguous part of the array.
--------------------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------------
Example 1:
Input: nums = [1,0,1,0,1], goal = 2
Output: 4
Explanation: The 4 subarrays are bolded and underlined below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
--------------------------------------------------------------------------------------------------------Intution---------------------------------------------------------------------------------------------------
Sliding Window Technique: The solve method utilizes the sliding window technique to efficiently find subarrays with a sum less than or equal to k.

Two Pointers: It employs two pointers (i and j) to iterate through the array and maintain a sliding window.

Calculating Subarray Sums: It calculates the sum of subarrays by incrementing i and adding nums[i] to the current sum.

Shrinking the Window: If the sum exceeds k, it shrinks the window by incrementing j and subtracting nums[j] from the sum until the sum is less than or equal to k.

Counting Valid Subarrays: For each valid subarray found (where the sum is less than or equal to k), it increments the ans variable.

Counting Subarrays with Specific Sum: The numSubarraysWithSum method calculates the count of subarrays with a specific sum goal by calling the solve method twice - once with goal and another time with goal - 1.

Difference Calculation: It computes the count of subarrays with sum exactly goal by subtracting the count of subarrays with sum less than goal from the count of subarrays with sum less than or equal to goal.

Final Result: The difference obtained provides the count of subarrays with the desired sum, efficiently leveraging the sliding window technique.
--------------------------------------------------------------------------------------------------------Code-------------------------------------------------------------------------------------------------------
class Solution {
    public int solve(int []nums, int k){
        if(k<0){
            return 0;
        }
        int j=0;
        int i=0;
        int sum=0;
        int ans=0;
        while(i<nums.length){
            sum+=nums[i];
            while(sum>k&&j<nums.length){
            sum-=nums[j];
                j++;
            }
            if(sum<=k){
                ans+=i-j+1;
                }
            i++;
        }
        return ans;
    }
    public int numSubarraysWithSum(int[] nums, int goal) {
       int x=solve(nums,goal);
       int y=solve(nums,goal-1);
       return x-y;
    }
}
