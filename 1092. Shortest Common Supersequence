------------------------------------------------------------------------------------------------Question-------------------------------------------------------------------------------------------------------------
Given two strings str1 and str2, return the shortest string that has both str1 and str2 as subsequences. If there are multiple valid strings, return any of them.

A string s is a subsequence of string t if deleting some number of characters from t (possibly 0) results in the string s.
------------------------------------------------------------------------------------------------Example-------------------------------------------------------------------------------------------------------------
Example 1:
Input: str1 = "abac", str2 = "cab"
Output: "cabac"
Explanation: 
str1 = "abac" is a subsequence of "cabac" because we can delete the first "c".
str2 = "cab" is a subsequence of "cabac" because we can delete the last "ac".
The answer provided is the shortest such string that satisfies these properties.
------------------------------------------------------------------------------------------------Approach 1 with Intution-------------------------------------------------------------------------------------------
class Solution {
    public String shortestCommonSupersequence(String str1, String str2) {
        int n=str1.length();
        int m=str2.length();

        int dp[][]=new int[n+1][m+1];
        for(int i=1;i<=n;i++){
            for(int j=1;j<=m;j++){
                if(str1.charAt(i-1)==str2.charAt(j-1)){
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else {
                    dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }// above is the lcs code 
       
       // here starts the same code as of printing lcs only diffrence is that we are adding the diffrent elemnts also 
        String str="";
        int i=n,j=m;                                                  
        while(i>0 && j>0){
            // If current character in X and Y are same, then 
            // current character is part of shortest supersequence
              if(str1.charAt(i-1)==str2.charAt(j-1)){
                  // Put current character in result 
                  str+=(str1.charAt(i-1));
                  // reduce values of i, j and index 
                  i--;
                  j--;
              }
              // If current character in X and Y are different 
              else if(dp[i-1][j] > dp[i][j-1]){
                   // Put current character of X in result 
                  str += (str1.charAt(i - 1));
                // reduce values of i and index 
                i--;
                  
              }
              else
            {
                 // Put current character of Y in result 
                  str+=(str2.charAt(j-1));
                  //reduce j
                  j--;

            }
        }
       // If Y reaches its end, put remaining characters 
        // of X in the result string 
        while (i > 0) 
        {
            str += (str1.charAt(i - 1));
            i--;
        }
 
        // If X reaches its end, put remaining characters 
        // of Y in the result string 
        while (j > 0)
        {
            str += (str2.charAt(j - 1));
            j--;
        }
 
        // reverse the string and return it 
        str = new StringBuilder(str).reverse().toString();
        return str;
     }
}

----------------------------------------------------------------------------------Approach 2 with Intution---------------------------------------------------------------------------------------------------
class Solution {
    public String shortestCommonSupersequence(String ss1, String ss2) {
        int n = ss1.length();
        int m = ss2.length();
        char[] s1 = ss1.toCharArray();
        char[] s2 = ss2.toCharArray();
        int[][] dp = new int[n+1][m+1];
        for(int i=1;i<=n;i++) {
            for(int j=1;j<=m;j++) {
                if(s1[i-1] == s2[j-1]) dp[i][j] = dp[i-1][j-1] + 1;
                else dp[i][j] = Math.max(dp[i][j-1], dp[i-1][j]);
            }
        }
        char[] ans = new char[n+m-dp[n][m]];
        int i = n;
        int j = m;
        int k = n+m-1-dp[n][m];
        while(i>0 && j>0) {
            if(s1[i-1] == s2[j-1]) {
                ans[k--] = s1[i-1];
                i--;
                j--;
            }
            else {
                if(dp[i-1][j] > dp[i][j-1]) {
                    ans[k--] = s1[i-1];
                    i--;
                }
                else {
                    ans[k--] = s2[j-1];
                    j--;
                }
            }
        }
        while(i>0) {
            ans[k--] = s1[i-1];
            i--;
        }
        while(j>0) {
            ans[k--] = s2[j-1];
            j--;

        }

        return new String(ans); 
    }
}


