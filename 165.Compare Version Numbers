------------------------------------------------------------------------------------------------Question----------------------------------------------------------------------------------------
Given two version numbers, version1 and version2, compare them.

Version numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. 
Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on.
For example 2.5.33 and 0.1 are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros.
This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0.
For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.

Return the following:
If version1 < version2, return -1.
If version1 > version2, return 1.
Otherwise, return 0.
------------------------------------------------------------------------------------------------Example----------------------------------------------------------------------------------------
Example 1:
Input: version1 = "1.01", version2 = "1.001"
Output: 0
Explanation: Ignoring leading zeroes, both "01" and "001" represent the same integer "1".

Example 2:
Input: version1 = "1.0", version2 = "1.0.0"
Output: 0
Explanation: version1 does not specify revision 2, which means it is treated as "0".

Example 3:
Input: version1 = "0.1", version2 = "1.1"
Output: -1
Explanation: version1's revision 0 is "0", while version2's revision 0 is "1". 0 < 1, so version1 < version2.
------------------------------------------------------------------------------------------------Intution----------------------------------------------------------------------------------------
Tokenization:
The method getTokens splits the version strings into segments using the dot as a delimiter and stores them in a list. This allows for easy comparison segment by segment.
Comparison:
The method compareVersion obtains tokenized versions of both input strings.
It then iterates through the segments of both versions simultaneously.
For each segment:
It converts the segment to an integer. If a segment doesn't exist for one version (due to unequal lengths), it's considered as 0 for comparison.
It compares the segments:
If the segment in version1 is greater than the corresponding segment in version2, it returns 1, indicating version1 is greater.
If the segment in version2 is greater than the corresponding segment in version1, it returns -1, indicating version2 is greater.
If both segments are equal, it proceeds to the next segment.
If all segments are equal up to the shorter version's length, it returns 0, indicating both versions are equal up to that point.
------------------------------------------------------------------------------------------------Code-----------------------------------------------------------------------------------------
class Solution {
    public int compareVersion(String version1, String version2) {
        List<String> v1 = getTokens(version1);
        List<String> v2 = getTokens(version2);
        
        int m = v1.size();
        int n = v2.size();
        
        int i = 0;
        while (i < m || i < n) {
            int a = i < m ? Integer.parseInt(v1.get(i)) : 0;
            int b = i < n ? Integer.parseInt(v2.get(i)) : 0;
            
            if (a > b)
                return 1;
            else if (b > a)
                return -1;
            else
                i++;
        }
        return 0;
    }
    
    private List<String> getTokens(String version) {
        String[] tokens = version.split("\\.");
        List<String> versionTokens = new ArrayList<>();
        for (String token : tokens) {
            versionTokens.add(token);
        }
        return versionTokens;
    }
}

