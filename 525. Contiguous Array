-----------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------
Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.
-----------------------------------------------------------------------------------------------------Example-----------------------------------------------------------------------------------------------------
Example 1:        
Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.

Example 2:
Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
-----------------------------------------------------------------------------------------------------Intution And Approach 1------------------------------------------------------------------------------------
To find the maximum length of a contiguous subarray with an equal number of 0s and 1s, we can use the concept of prefix sum. Whenever we encounter a 0, we decrement the sum by 1,
and whenever we encounter a 1, we increment the sum by 1. If the prefix sum at two indices is the same, 
it means that the number of 0s and 1s between those two indices is the same. We store these prefix sums along with their indices in a hash map. 
Then, for each prefix sum encountered, we check if we have seen this sum before. 
If so, it means that the subarray between the current index and the index where this sum was last encountered has an equal number of 0s and 1s. 
We calculate the length of this subarray and update the maximum length accordingly.

Approach
Initialize a hash map to store prefix sums along with their indices.
Initialize variables for sum, maximum subarray length, and iterate through the input array.
For each element in the array, update the sum according to the element (decrement by 1 for 0, increment by 1 for 1).
If the sum becomes zero at any index, update the maximum length to the current index plus one.
If the sum is encountered again (which means there is a subarray with equal 0s and 1s between the previous occurrence and the current index),
update the maximum length if the current subarray length is greater than the previously stored maximum length.
Return the maximum subarray length.

Complexity Analysis
Time complexity: (O(n)), where (n) is the length of the input array. We traverse the array only once.
Space complexity: (O(n)), in the worst case, when all elements are distinct and the sum becomes distinct for each index, we would need to store all prefix sums in the hash map.

Code:
class Solution {
    public int findMaxLength(int[] nums) {
        int n = nums.length;
        int sum=0;
        HashMap<Integer,Integer> idxsum=new HashMap<>();
        int maxsublen=0;
        for(int i=0;i<n;i++){
            sum+=nums[i]==0?-1:1;
            if(sum==0){
                maxsublen=i+1;
            }
            else if(idxsum.containsKey(sum)){
                maxsublen=Math.max(maxsublen,i-idxsum.get(sum));
            }
            else{
                idxsum.put(sum,i);
            }
        }
        return maxsublen;
    }
}


------------------------------------------------------------------------------------------Intution And Approach 2----------------------------------------------------------------------------------------------
Mapping 0s to -1 and 1s to 1: The line (nums[i] << 1) - 1 effectively maps 0s to -1 and 1s to 1. This is done to facilitate the tracking of running sums, 
where 0s and 1s contribute to the sum but with distinct values (-1 and 1).

Tracking Running Sums: The current variable is used to keep track of the running sum. Initially, it's set to N, which means there are as many 0s as 1s. 
As we traverse the array, we update current based on the value of the current element (mapped to -1 or 1).

Using HashMap for Efficient Lookup: The mp array is used as a hashmap to store the value of current along with its index.
This helps in efficiently finding the length of subarrays with equal number of 0s and 1s.

Updating Result: Whenever we encounter a value of current that equals N, it implies that from the beginning of the array up to the current index, there are equal numbers of 0s and 1s. 
In this case, we update result to i+1.

Handling Repeated Running Sums: If current is encountered again (indicating that the sum of elements from the previous occurrence of this sum to the current index is zero), 
we calculate the length of the subarray and update result if it's greater than the current result.

Code:
class Solution {
    public int findMaxLength(int[] nums) {
        int N = nums.length;
        int[] mp = new int[2*N+2];
        int current = N;
        int result = 0;

        for(int i = 0; i < N; i++) {
            current += (nums[i] << 1) - 1;//(nums[i] << 1) - 1 maps 0 to -1 and 1 to 1
            if(current == N) {
                result = i+1;
            }
            else if(mp[current] == 0) {
                mp[current] = i+1;
            }
            else {
                result = Math.max(result, i - mp[current]+1);
            }
        }
        return result;
    }
}


