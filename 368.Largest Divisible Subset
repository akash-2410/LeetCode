--------------------------------------------------------------------------------------------------------Question------------------------------------------------------------------------------------------------
Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:
answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.
--------------------------------------------------------------------------------------------------------Example------------------------------------------------------------------------------------------------
Example 1:
Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.

Example 2:
Input: nums = [1,2,4,8]
Output: [1,2,4,8]
--------------------------------------------------------------------------------------------------------Intution with Code--------------------------------------------------------------------------------------

class Solution {
    public List<Integer> largestDivisibleSubset(int[] nums) {
        int n = nums.length;//length of the input array nums
        int[] dp = new int[n];//array will be used to store the length of the largest divisible subset ending at each index.
        Arrays.fill(dp, 1);// initializes all elements of the dp array to 1.
        Arrays.sort(nums);//input array nums is sorted in ascending order.
        
        int maxSize = 1, maxIndex = 0;// are initialized to keep track of the maximum size of a divisible subset and the index of the last element in that subset
        for (int i = 1; i < n; i++) {// loop iterates over each element of the input array nums, starting from the second element (i = 1).
            for (int j = 0; j < i; j++) {//Within the outer loop, another loop is used to iterate over the elements of nums from index 0 up to i - 1.
                if (nums[i] % nums[j] == 0) {//This condition checks if the element at index i is divisible by the element at index j.
                 
                   //If nums[i] is divisible by nums[j], the value of dp[i] (length of the divisible subset ending 
                   at index i) is updated to be the maximum of its current value and dp[j] + 1,
                   where dp[j] represents the length of the divisible subset ending at index j.
                  
                    dp[i] = Math.max(dp[i], dp[j] + 1);

                    //If the updated value of dp[i] is greater than the current maxSize,
                    maxSize is updated to dp[i], and maxIndex is updated to i.
                    if (dp[i] > maxSize) {
                        maxSize = dp[i];
                        maxIndex = i;
                    }
                }
            }
        }
        
        List<Integer> result = new ArrayList<>();// is initialized to store the elements of the largest divisible subset.
        int num = nums[maxIndex];// is initialized with the value of the element at index maxIndex in the sorted array nums.
        for (int i = maxIndex; i >= 0; i--) {
            if (num % nums[i] == 0 && dp[i] == maxSize) { //Within the loop, this condition checks if num is divisible by nums[i] and if the length of the divisible subset ending at index i is equal to maxSize.
              
                //If the condition is true, nums[i] is added to the result list, num is updated to nums[i], and maxSize is decremented.
                result.add(nums[i]);
                num = nums[i];
                maxSize--;
            }
        }
        
        return result;
    }
}
