---------------------------------------------------------------------------------------------------Question---------------------------------------------------------------------------------------------------------
A binary tree is named Even-Odd if it meets the following conditions:

The root of the binary tree is at level index 0, its children are at level index 1, their children are at level index 2, etc.
For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).
For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).
Given the root of a binary tree, return true if the binary tree is Even-Odd, otherwise return false.

---------------------------------------------------------------------------------------------------Example---------------------------------------------------------------------------------------------------------

Example 1:
Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
Output: true
Explanation: The node values on each level are:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are all odd and increasing and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.

---------------------------------------------------------------------------------------------Code With Explanation---------------------------------------------------------------------------------------------------

 //using BFS
T.C.=O(n)
S.C.=O(n)

class Solution {
    public boolean isEvenOddTree(TreeNode root) {
        Queue<TreeNode>que=new LinkedList<>();//for storing nodes
        que.offer(root);//add root node to que
        boolean evenlevel=true;//for checking the level whether its odd or even
          
        // traversing through every node   
        while(!que.isEmpty()){
            int size=que.size(); // size of the queue
            int prev=evenlevel?Integer.MIN_VALUE:Integer.MAX_VALUE;//if at even level mark prev with minimum bcz it should be in increasing order and do vice versa for the oddlevel
            
            // here we traversing through the whole elemnts in the level {3,7,10}eg 
            while(size-- >0){
              TreeNode curr =que.poll();//go on poping the elements from front and check the conditions
             

             // checking the conditions as given in the question
              if((evenlevel && (curr.val%2==0 || curr.val<= prev)) ||(!evenlevel && (curr.val%2==1 || curr.val>= prev))){
                  return false;
              }

              prev=curr.val;// if non of the above conditions mark prev as value of current node
              
              // go on traversing left and right and adding to the queue
              if(curr.left!=null){
                  que.offer(curr.left);
              }
              if(curr.right!=null){
                  que.offer(curr.right);
              }
            }
               evenlevel=!evenlevel;// at each traversal even to odd
            }
            return true; // it means each level satisfying the conditions
           
        }

    }
