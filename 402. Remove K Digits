---------------------------------------------------------------------------------------Question------------------------------------------------------------------------------------------------
Given string num representing a non-negative integer num, and an integer k, return the smallest possible integer after removing k digits from num.
---------------------------------------------------------------------------------------Example------------------------------------------------------------------------------------------------
Example 1:
Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.

Example 2:
Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.

Example 3:
Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.
------------------------------------------------------------------------------------Intution and Code------------------------------------------------------------------------------------------------
public class Solution {
    public String removeKdigits(String num, int k) {
        // StringBuilder to act like a stack to efficiently remove digits
        StringBuilder result = new StringBuilder();
        int n = num.length(); // Length of the input number
        
        for(int i = 0; i < n; i++) { // Loop through each digit in the input number
            // While there are digits in the result, the last digit in result is greater than the current digit,
            // and we can still remove digits (k > 0), remove the last digit from result
            while(result.length() > 0 && result.charAt(result.length() - 1) > num.charAt(i) && k > 0) {
                result.deleteCharAt(result.length() - 1); // Remove the last digit
                k--; // Decrement k, as we removed a digit
            }
            
            // If result is not empty OR current digit is not '0', append the current digit to result
            if(result.length() > 0 || num.charAt(i) != '0') {
                result.append(num.charAt(i)); // Append the current digit to result
            }
        }
        
        // If there are still digits to be removed (k > 0), remove them from the end of result
        while(result.length() > 0 && k > 0) {
            result.deleteCharAt(result.length() - 1); // Remove the last digit
            k--; // Decrement k, as we removed a digit
        }

        // If result is empty, return "0", otherwise return the result as a string
        if(result.length() == 0) {
            return "0";
        }
        
        return result.toString(); // Return the result as a string
    }
}

------------------------------------------------------------------------------------Intution and Code2------------------------------------------------------------------------------------------------
class Solution {
    public static String removeKdigits(String num, int k) {
        // Convert the input number string to a character array for easier manipulation
        char[] digits = num.toCharArray();
        
        // If the number of digits to be removed 'k' equals the length of the number 'num',
        // it means we have to remove all digits, so return "0" as the result
        if (k == num.length()) {
            return "0";
        }

        // Initialize a stack to hold the digits
        char[] stack = new char[digits.length];
        int stackTop = -1; // Pointer to the top of the stack, initialized to -1
        int removalCount = k; // Variable to track the remaining number of digits to remove

        // Iterate through each digit in the input number
        for (int i = 0; i < digits.length; i++) {
            // While there are still digits to remove (removalCount > 0),
            // and the top digit in the stack is greater than the current digit,
            // pop the top digit from the stack and decrement removalCount
            while (removalCount > 0 && stackTop >= 0 && stack[stackTop] > digits[i]) {
                stackTop--;
                removalCount--;
            }
            // Push the current digit onto the stack
            stackTop++;
            stack[stackTop] = digits[i];
        }

        // Find the starting index of the result (ignoring leading zeros)
        int nonZeroStart = 0;
        while (stack[nonZeroStart] == '0' && nonZeroStart < digits.length - k - 1) {
            nonZeroStart++;
        }

        // Construct the resulting string from the non-zero digits in the stack
        // Start from the index of non-zero digits to the end of the stack
        return String.valueOf(stack, nonZeroStart, digits.length - k - nonZeroStart);
    }	
}

